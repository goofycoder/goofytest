int *p = NULL;

int **pp = &p;                  // OK

if (pp == NULL)                 // false;

if (*pp == NULL)                // true;


--------------------------------------------------------
floating number:


float f = 0.1;
if(f==0.1)      // return false; because 0.1 is promoted to double from float.
                // the promotion of float to double can only cause mismatch 
                // when a value (like 0.1) uses more precision bits than the bits of single precision.
if(f==0.1f)     // return true;

float f2 = 0.5; 
if(f==0.5)      // return true;
if(f==0.5f)     // return 


------------------------------------------------------
void **ptr;
int size;

Q: reverse the memory ptr points to.


A: it is pointer to pointer. thus only reverse the ptr to memory, not memory itself.


for(int i=0; i<size/2; i++) 
{
  ptr[i] = ptr[size-i-1]
}

------------------------------------
sizeof(int) is not 32, it is 4.

--------------------------------------------
int arr[] = {2,1,3,5,4};
int len = sizeof(arr)/sizeof(int);    // OK, len = 5
int len = sizeof(arr)/sizeof(arr[0]); // OK, len = 5

-------------------------------------------
the keyword 'bool' is defined in <stdbool.h>

-------------------------------------------
INT_MAX is defined in <limits.h>

INT_MAX is 2^31-1
INT_MIN is -2^31+1
